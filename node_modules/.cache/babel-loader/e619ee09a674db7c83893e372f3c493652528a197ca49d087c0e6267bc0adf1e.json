{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swamy.LAPTOP-0RVCTRRS\\\\OneDrive\\\\Desktop\\\\Dailyfix Nexus\\\\src\\\\components\\\\AIFeatures\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AIFeatures = ({\n  conversation,\n  onReplySelect\n}) => {\n  _s();\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [aiReplies, setAiReplies] = useState([]);\n  const generateReplies = async () => {\n    setIsGenerating(true);\n    try {\n      // This would be replaced with your actual AI service call\n      const lastMessage = conversation.messages[conversation.messages.length - 1];\n      const context = (lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.text) || '';\n\n      // Simulate AI response generation\n      const responses = await generateAIResponses(context);\n      setAiReplies(responses);\n    } catch (error) {\n      console.error('Error generating AI responses:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  const handleReplyClick = reply => {\n    if (onReplySelect) {\n      onReplySelect(reply);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ai-features\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-replies\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-replies-header\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-replies-button\",\n          onClick: generateReplies,\n          disabled: isGenerating,\n          children: [isGenerating ? 'Generating...' : 'Generate AI Replies', /*#__PURE__*/_jsxDEV(\"span\", {\n            role: \"img\",\n            \"aria-label\": \"ai\",\n            children: \"\\uD83E\\uDD16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), aiReplies.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-replies-list\",\n        children: aiReplies.map((reply, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ai-reply-option\",\n          onClick: () => handleReplyClick(reply),\n          children: reply\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), conversation.summary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: conversation.summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to simulate AI response generation\n_s(AIFeatures, \"/0VZ/J1iSzKfj5WL39PmjEPPYf8=\");\n_c = AIFeatures;\nconst generateAIResponses = async context => {\n  // In a real implementation, this would call your AI service\n  const commonWorkflows = {\n    question: [\"I'll look into this and get back to you shortly\", \"Let me check with the team and update you\", \"Could you provide more specific details about this?\"],\n    update: [\"Thanks for the update. I'll review this right away\", \"Got it, I'll process this information\", \"I'll coordinate with the relevant team members\"],\n    request: [\"I'll prioritize this request\", \"When do you need this completed by?\", \"I'll start working on this immediately\"]\n  };\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simple context matching (would be more sophisticated in real implementation)\n  if (context.includes('?')) {\n    return commonWorkflows.question;\n  } else if (context.toLowerCase().includes('update')) {\n    return commonWorkflows.update;\n  } else {\n    return commonWorkflows.request;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"AIFeatures\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AIFeatures","conversation","onReplySelect","_s","isGenerating","setIsGenerating","aiReplies","setAiReplies","generateReplies","lastMessage","messages","length","context","text","responses","generateAIResponses","error","console","handleReplyClick","reply","className","children","onClick","disabled","role","fileName","_jsxFileName","lineNumber","columnNumber","map","index","summary","_c","commonWorkflows","question","update","request","Promise","resolve","setTimeout","includes","toLowerCase","$RefreshReg$"],"sources":["C:/Users/swamy.LAPTOP-0RVCTRRS/OneDrive/Desktop/Dailyfix Nexus/src/components/AIFeatures/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport type { Conversation } from '../../types/conversation';\n\ninterface AIFeaturesProps {\n  conversation: Conversation;\n  onReplySelect?: (reply: string) => void;\n}\n\nexport const AIFeatures: React.FC<AIFeaturesProps> = ({ conversation, onReplySelect }) => {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [aiReplies, setAiReplies] = useState<string[]>([]);\n\n  const generateReplies = async () => {\n    setIsGenerating(true);\n    try {\n      // This would be replaced with your actual AI service call\n      const lastMessage = conversation.messages[conversation.messages.length - 1];\n      const context = lastMessage?.text || '';\n      \n      // Simulate AI response generation\n      const responses = await generateAIResponses(context);\n      setAiReplies(responses);\n    } catch (error) {\n      console.error('Error generating AI responses:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleReplyClick = (reply: string) => {\n    if (onReplySelect) {\n      onReplySelect(reply);\n    }\n  };\n\n  return (\n    <div className=\"ai-features\">\n      <div className=\"ai-replies\">\n        <div className=\"ai-replies-header\">\n          <button \n            className=\"generate-replies-button\"\n            onClick={generateReplies}\n            disabled={isGenerating}\n          >\n            {isGenerating ? 'Generating...' : 'Generate AI Replies'}\n            <span role=\"img\" aria-label=\"ai\">ðŸ¤–</span>\n          </button>\n        </div>\n        {aiReplies.length > 0 && (\n          <div className=\"ai-replies-list\">\n            {aiReplies.map((reply, index) => (\n              <button\n                key={index}\n                className=\"ai-reply-option\"\n                onClick={() => handleReplyClick(reply)}\n              >\n                {reply}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {conversation.summary && (\n        <div className=\"conversation-summary\">\n          <h4>Summary</h4>\n          <p>{conversation.summary}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Helper function to simulate AI response generation\nconst generateAIResponses = async (context: string): Promise<string[]> => {\n  // In a real implementation, this would call your AI service\n  const commonWorkflows = {\n    question: [\n      \"I'll look into this and get back to you shortly\",\n      \"Let me check with the team and update you\",\n      \"Could you provide more specific details about this?\"\n    ],\n    update: [\n      \"Thanks for the update. I'll review this right away\",\n      \"Got it, I'll process this information\",\n      \"I'll coordinate with the relevant team members\"\n    ],\n    request: [\n      \"I'll prioritize this request\",\n      \"When do you need this completed by?\",\n      \"I'll start working on this immediately\"\n    ]\n  };\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simple context matching (would be more sophisticated in real implementation)\n  if (context.includes('?')) {\n    return commonWorkflows.question;\n  } else if (context.toLowerCase().includes('update')) {\n    return commonWorkflows.update;\n  } else {\n    return commonWorkflows.request;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}